#include<iostream>
#include<vector>
#include<queue>using namespace std;
class car{
    public:
    int idx:
    int distSq;

    Car(int idx,int distSq){
        this->idx=idx;
        this->distSq=distSq;
    }
    bool operator <(const car &obj) const{
        return this-> distSq> obj.distSq;//minheap
    }
};
void nearbyCars(vector<pairs<int,int>>pos,int K){
    vector<Car> cars;
    
    for(int i=0;i<pos.size();i++){
        int distSq = (pos[i].first*pos[i].first*pos[i].second*pos[i].second);
        cars.pushback(Car(i, distSq));
    }

    '''priority_queue<Car>pq;

    for(int i=0;i<cars.size();i++){
        pq.push(cars[i]);
    }'''
    //like this 
    priority_queue<Car> pq(cars.begin(), cars.end());


    """for(int i=0; i<cars.size(); i++){
        pq.push(cars[i]);
    }"""
    for(int i=0;i<K;i++){ //sorting ke comparison me priority queue has 0(k*logn+n)
        cout<<"car"<<pq.top().idx<<endl;
        pq.pop();
    }

}
int main(){
    vector<pair<int,int>>pos;
    pos.push_back(make_pair(3,3));
    pos.push_back(make_pair(5,-1));
    pos.push_back(make_pair(-2,4));

    int K=2;
    nearbyCars(pos,K);

    return 0;


}
