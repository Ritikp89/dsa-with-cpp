#include<iostream>
#include<vector>
#include<string>
using namespace std;

class Node{
public:
     string key;
     int val;
     Node*next;
     

     Node(string key,int val){
        this->key=key;
        this->val=val;
        next=NULL;
     }
     ~Node(){
        if(next!=NULL){
            delete next;
        }
     }
};
class HashTable{
    int totSize;
    int currSize;
    Node** table;

    int hashFunction (string key){
        int idx =0;
        for(int i=0;i<key.size();i++){
            idx = (idx + (key[i]*key[i]))%totSize;
        }
        return idx%totSize;
    }
    void rehash(){
        Node** oldTable=table;
        int oldSize = totSize;

        totSize = 2*totSize;
        currSize = 0;
        table = new Node*[totSize];

        for(int i=0; i<totSize; i++){
            table[i]=NULL;
        }

        for (int i =0 ; i<oldSize; i++){
            Node* temp = oldTable[i];
            while(temp!=NULL){
                insert(temp->key,temp->val);
                temp = temp->next;
            }
            if(oldTable[i]!=NULL){
                delete oldTable[i];
            }
        }
        delete[] oldTable;
    }
public:
HashTable(int size=5){
    totSize = size;
    currSize= 0;

    table = new Node*[totSize];

    for(int i =0;i<totSize;i++) {
        table[i] = NULL;
    }
}
void insert(string key,int val){
    int idx = hashFunction(key);

    Node* newNode = new Node(key,val);
    Node* head = table[idx];

    newNode->next = table[idx];
    table[idx] = newNode;

    currSize++;

    double lamdba = currSize/(double)totSize;
    if(lamdba>1){
        rehash();
    }

}
bool exist(string key){
    int idx = hashFunction(key);

    Node*temp= table[idx];
    while(temp!=NULL){
        if(temp-> key == key){
            return true;
        }
        temp = temp->next;
    }
     return false;
}
int search(string key){
    int idx = hashFunction(key);

    Node*temp = table [idx];
    while(temp!=NULL){
        if(temp->key == key){
            return temp->val;
        }
        temp = temp->next;
    }
    return -1;
}
void remove(string key){

}
void print(){
     for(int i=0; i<totSize ; i++){
        cout << "idx"<<i<<"->";
        Node*temp = table[i];
        while(temp!=NULL){
            cout<<"("<< temp->key <<","<<temp->val <<")->";
            temp =temp->next;
        }
        cout<<endl;
     }
}
 
};


int main(){
    HashTable ht;

    ht.insert("india",150);
    ht.insert("china",150);
    ht.insert("us",50);
    ht.insert("nepal",10);
    ht.insert("uk",20);

    ht.print();
    return 0;
}
