#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

class Row {
public:
    int count;
    int idx;

    Row(int count, int idx) {
        this->count = count;
        this->idx = idx;
    }

    bool operator<(const Row& obj) const {
        if (this->count == obj.count) {
            return this->idx < obj.idx;
        }
        return this->count < obj.count;
    }
};

void weakestSoldier(const vector<vector<int>>& matrix, int k) {
    vector<Row> all_rows;
    for (int i = 0; i < matrix.size(); i++) {
        int soldier_count = 0;
        for (int j = 0; j < matrix[i].size() && matrix[i][j] == 1; j++) {
            soldier_count++;
        }
        all_rows.push_back(Row(soldier_count, i));
    }

    sort(all_rows.begin(), all_rows.end());

    cout << "The " << k << " weakest rows are:" << endl;
    for (int i = 0; i < k; i++) {
        cout << "Row " << all_rows[i].idx << endl;
    }
}

int main() {
    vector<vector<int>> matrix = {
        {1, 0, 0, 0},
        {1, 1, 1, 1},
        {1, 0, 0, 0},
    };
    
    weakestSoldier(matrix, 2);
    
    return 0;
}
